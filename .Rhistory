)
my_server <- function(input, output){
#server does stuff
}
shinyApp(ui = my_ui, server = my_server)
shinyApp(ui = my_ui, server = my_server)
shinyApp(ui = my_ui, server = my_server)
my_ui <- fluidPage(#make me a shiny UI
h1("Hello Shinny"),
P("This is my first demo"),
textInput(inputId = "user_name", label = "What is your name")#control widget
)
my_ui <- fluidPage(#make me a shiny UI
h1("Hello Shinny"),
p("This is my first demo"),
textInput(inputId = "user_name", label = "What is your name")#control widget
)
my_server <- function(input, output){
#server does stuff
}
shinyApp(ui = my_ui, server = my_server)
my_ui <- fluidPage(#make me a shiny UI
h1("Hello Shinny"),
p("This is my first demo"),
textInput(inputId = "user_name", label = "What is your name"),#control widget
sliderInput(inputId = "slide_key", label = "Pick a number",
min = 1, max = 20, value = 12)
)
my_server <- function(input, output){
#server does stuff
}
shinyApp(ui = my_ui, server = my_server)
output$message <- renderText({
msg <- paste("Hello to", input$user_name)
msg#return
})
shinyApp(ui = my_ui, server = my_server)
shinyApp(ui = my_ui, server = my_server)
shinyApp(ui = my_ui, server = my_server)
my_ui <- fluidPage(#make me a shiny UI
h1("Hello Shinny"),
p("This is my first demo"),
textInput(inputId = "user_name", label = "What is your name"),#control widget
sliderInput(inputId = "slide_key", label = "Pick a number",
min = 1, max = 20, value = 12),
textOutput(outputId = "msg")
)
my_server <- function(input, output){
#server does stuff
output$message <- renderText({
msg <- paste("Hello to", input$user_name)
msg#return
})
shinyApp(ui = my_ui, server = my_server)
shinyApp(ui = my_ui, server = my_server)
my_ui <- fluidPage(#make me a shiny UI
h1("Hello Shinny"),
p("This is my first demo"),
textInput(inputId = "user_name", label = "What is your name"),#control widget
sliderInput(inputId = "slide_key", label = "Pick a number",
min = 1, max = 20, value = 12),
textOutput(outputId = "msg")
)
my_server <- function(input, output){
#server does stuff
output$message <- renderText({
msg <- paste("Hello to", input$user_name)
msg#return
})
}
shinyApp(ui = my_ui, server = my_server)
runApp('C:/Users/bltwi/Shiny example')
runApp('C:/Users/bltwi/Shiny example')
shinyApp(ui = my_ui, server = my_server)
runApp('C:/Users/bltwi/Shiny example')
shinyApp(ui = my_ui, server = my_server)
output$message <- renderText({
msg <- paste("Hello to", input$user_name)
msg#return
})
my_server <- function(input, output){
#server does stuff
output$message <- renderText({
msg <- paste("Hello to", input$user_name)
msg#return
})
}
runApp('C:/Users/bltwi/Shiny example')
shinyApp(ui = my_ui, server = my_server)
# Load the `shiny` package
library("shiny")
?titlePanel
?numericInput
?numericInput
library("ggplot2")
library("dplyr")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='btwilley',
token='9E63AE2F9F668B956A4923343A79A46E',
secret='<SECRET>')
> rsconnect::setAccountInfo(name='btwilley',
+                           token='9E63AE2F9F668B956A4923343A79A46E',
+                           secret='<SECRET>')
rsconnect::setAccountInfo(name='btwilley',
token='9E63AE2F9F668B956A4923343A79A46E',
secret='123Rnxq34vuo8fXwHe4HaxocH1SwiRIk7TvChVhb')
# Define a UI using a `fluidPage()` layout with the following content:
my_ui <- fluidPage(
# A `titlePanel` with the title "Diamond Viewer"
titlePanel("Diamond Viewer")
# A `sliderInput()` labeled "Price (in dollars)". This slider should let the
# user pick a range between the minimum and maximum price of the entire
# diamond data set. The initial value should be the vector of min/max price.
# A `selectInput()` labeled "Feature of Interest". This dropdown should let
# the user pick one of the columns of the diamond data set. Use the `carat`
# column as a default
# A `checkboxInput()` labeled "Show Trendline". It's default value is TRUE
# A plotOutput showing the 'plot' output (based on the user specifications)
# Bonus: a dataTableOutput showing a data table of relevant observations
) #end of UI
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
shiny::runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
rsconnect::setAccountInfo(name='btwilley', token='9E63AE2F9F668B956A4923343A79A46E', secret='123Rnxq34vuo8fXwHe4HaxocH1SwiRIk7TvChVhb')
runApp('C:/Users/bltwi/book-exercises/chapter-19-exercises/exercise-3')
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
View(my_ui)
runApp('C:/Users/bltwi/ae5_final_project')
runApp('C:/Users/bltwi/ae5_final_project')
youth_smoking <- get_youth_tobacco_data()
youth_poverty <- get_youth_poverty_data()
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation", "Year" = "year")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation", c("Year" = "year"))) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
View(joined)
youth_smoking <- get_youth_tobacco_data()
youth_poverty <- get_youth_poverty_data()
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
View(joined)
View(joined)
library("shiny")
library("dplyr")
library("tidyr")
library("ggplot2")
source("analysis.R")
youth_smoking <- get_youth_tobacco_data()
youth_poverty <- get_youth_poverty_data()
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
youth_smoking <- get_youth_tobacco_data()
setwd("C:/Users/bltwi/ae5_final_project")
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
youth_smoking <- get_youth_tobacco_data()
source("analysis.R")
youth_smoking <- get_youth_tobacco_data()
youth_poverty <- get_youth_poverty_data()
# Returns a data frame of the SAIPE with the data on youth (age 0-17) poverty across the
# nation
get_youth_poverty_data <- function() {
poverty_uri <- "api.census.gov/data/timeseries/poverty/saipe?get=NAME,SAEPOV0_17_PT,SAEPOVRT0_17_PT,SAEMHI_PT,STABREV&for=state:*&YEAR=1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017"
poverty_header <- GET(poverty_uri)
poverty_content <- content(poverty_header, type = "text", encoding = "UTF-8")
poverty_data <- fromJSON(poverty_content)
# Turn data into a data frame to work with and give it column names
poverty_data <- as.data.frame(poverty_data, stringsAsFactors = FALSE)
colnames(poverty_data) <- c("state", "ages_0_to_17_in_poverty_count", "ages_0_to_17_in_poverty_rate", "median_household_income_estimate", "state_abbreviation", "year","")
# Take out the first row of the original set's names
poverty_data <- poverty_data[-1,]
poverty_data <- select(poverty_data, state, ages_0_to_17_in_poverty_count, ages_0_to_17_in_poverty_rate, median_household_income_estimate, year, state_abbreviation)
# Take out states from the frame that are not in the Youth Tobacco data frame
poverty_data <- poverty_data %>%
group_by(state,state_abbreviation) %>%
filter(state_abbreviation != "AL" &
state_abbreviation !=  "MT" &
state_abbreviation != "NV" &
state_abbreviation != "OR" &
state_abbreviation != "WA")
poverty_data
}
get_youth_poverty_data()
# Returns a data frame of the SAIPE with the data on youth (age 0-17) poverty across the
# nation
get_youth_poverty_data <- function() {
poverty_uri <- "https://api.census.gov/data/timeseries/poverty/saipe?get=NAME,SAEPOV0_17_PT,SAEPOVRT0_17_PT,SAEMHI_PT,STABREV&for=state:*&YEAR=1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017"
poverty_header <- GET(poverty_uri)
poverty_content <- content(poverty_header, type = "text", encoding = "UTF-8")
poverty_data <- fromJSON(poverty_content)
# Turn data into a data frame to work with and give it column names
poverty_data <- as.data.frame(poverty_data, stringsAsFactors = FALSE)
colnames(poverty_data) <- c("state", "ages_0_to_17_in_poverty_count", "ages_0_to_17_in_poverty_rate", "median_household_income_estimate", "state_abbreviation", "year","")
# Take out the first row of the original set's names
poverty_data <- poverty_data[-1,]
poverty_data <- select(poverty_data, state, ages_0_to_17_in_poverty_count, ages_0_to_17_in_poverty_rate, median_household_income_estimate, year, state_abbreviation)
# Take out states from the frame that are not in the Youth Tobacco data frame
poverty_data <- poverty_data %>%
group_by(state,state_abbreviation) %>%
filter(state_abbreviation != "AL" &
state_abbreviation !=  "MT" &
state_abbreviation != "NV" &
state_abbreviation != "OR" &
state_abbreviation != "WA")
poverty_data
}
get_youth_poverty_data()
youth_poverty <- get_youth_poverty_data()
youth_smoking <- get_youth_tobacco_data()
left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation"))
left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>% Vi
left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>% View
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
View(joined)
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state, Year) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
View(joined)
select_values <- joined$state
# Define a UI using a `fluidPage()` layout with the following content:
my_ui <- fluidPage(
# A `titlePanel` with the title "Poverty and Youth Tobacco by State"
titlePanel("Poverty and Youth Tobacco by State"),
# A `selectInput()` labeled "Select a state". This dropdown should let
# the user pick one of the states in the joined data set. Use Washington
# as the default
selectInput(inputId = "state", label = "Select a State",
choices = select_values, selected = "Washington"),
# A plotOutput showing the 'plot' output (based on the user specifications)
plotOutput(outputId = "my_plot")
) #end of UI
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my_server <- function(input,output){
# Assign a reactive `renderPlot()` function to the outputted 'plot' value
output$my_plot <- renderPlot({
#use the joined data set to make a scattered plot of poverty with under age
# smoking as smooth to show causation
p <- ggplot(data = joined)+
geom_point(mapping = aes(x = Year, y = data_value))+
geom_smooth(mapping = aes(x = Year, y = ages_0_to_17_in_poverty))
p #return the plot
})#end of render plot
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
runApp('practice.R')
runApp('practice.R')
library("shiny")
library("dplyr")
library("tidyr")
library("ggplot2")
source("analysis.R")
youth_smoking <- get_youth_tobacco_data()
youth_poverty <- get_youth_poverty_data()
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state, Year) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
View(joined)
View(youth_poverty)
View(youth_smoking)
# use as select inputs
select_values <- joined$state
# Define a UI using a `fluidPage()` layout with the following content:
my_ui <- fluidPage(
# A `titlePanel` with the title "Poverty and Youth Tobacco by State"
titlePanel("Poverty and Youth Tobacco by State"),
# A `selectInput()` labeled "Select a state". This dropdown should let
# the user pick one of the states in the joined data set. Use Washington
# as the default
selectInput(inputId = "state", label = "Select a State",
choices = select_values, selected = "Washington"),
# A plotOutput showing the 'plot' output (based on the user specifications)
plotOutput(outputId = "my_plot")
) #end of UI
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my_server <- function(input,output){
# Assign a reactive `renderPlot()` function to the outputted 'plot' value
output$my_plot <- renderPlot({
joined <- joined %>% filter(state == input$state)
#use the joined data set to make a scattered plot of poverty with under age
# smoking as smooth to show causation
p <- ggplot(data = joined)+
geom_point(mapping = aes(x = Year, y = avg_rate_smoking))+
geom_smooth()
p #return the plot
})#end of render plot
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
library("shiny")
library("dplyr")
library("tidyr")
library("ggplot2")
source("analysis.R")
youth_smoking <- get_youth_tobacco_data()
youth_poverty <- get_youth_poverty_data()
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state, Year) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
View(joined)
View(youth_poverty)
View(youth_smoking)
# use as select inputs
select_values <- joined$state
# Define a UI using a `fluidPage()` layout with the following content:
my_ui <- fluidPage(
# A `titlePanel` with the title "Poverty and Youth Tobacco by State"
titlePanel("Poverty and Youth Tobacco by State"),
# A `selectInput()` labeled "Select a state". This dropdown should let
# the user pick one of the states in the joined data set. Use Washington
# as the default
selectInput(inputId = "state", label = "Select a State",
choices = select_values, selected = "Washington"),
# A plotOutput showing the 'plot' output (based on the user specifications)
plotOutput(outputId = "my_plot")
) #end of UI
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my_server <- function(input,output){
# Assign a reactive `renderPlot()` function to the outputted 'plot' value
output$my_plot <- renderPlot({
joined <- joined %>% filter(state == input$s)
#use the joined data set to make a scattered plot of poverty with under age
# smoking as smooth to show causation
p <- ggplot(data = joined)+
geom_point(mapping = aes(x = Year, y = avg_rate_smoking))+
geom_smooth(mapping = aes(x = Year, y = ages_0_to_17_in_poverty_rate))
p #return the plot
})#end of render plot
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
library("shiny")
library("dplyr")
library("tidyr")
library("ggplot2")
source("analysis.R")
youth_smoking <- get_youth_tobacco_data()
youth_poverty <- get_youth_poverty_data()
joined <- left_join(youth_smoking, youth_poverty,
by = c("State" = "state_abbreviation")) %>%
select(state, ages_0_to_17_in_poverty_rate, Data_Value, Year) %>%
group_by(state, Year) %>%
summarise(avg_rate_smoking = mean(Data_Value),
ages_0_to_17_in_poverty_rate =
mean(as.numeric(ages_0_to_17_in_poverty_rate), na.rm = TRUE))
View(joined)
View(youth_poverty)
View(youth_smoking)
# use as select inputs
select_values <- joined$state
# Define a UI using a `fluidPage()` layout with the following content:
my_ui <- fluidPage(
# A `titlePanel` with the title "Poverty and Youth Tobacco by State"
titlePanel("Poverty and Youth Tobacco by State"),
# A `selectInput()` labeled "Select a state". This dropdown should let
# the user pick one of the states in the joined data set. Use Washington
# as the default
selectInput(inputId = "state", label = "Select a State",
choices = select_values, selected = "Washington"),
# A plotOutput showing the 'plot' output (based on the user specifications)
plotOutput(outputId = "my_plot")
) #end of UI
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
my_server <- function(input,output){
# Assign a reactive `renderPlot()` function to the outputted 'plot' value
output$my_plot <- renderPlot({
joined <- joined %>% filter(state == input$state)
#use the joined data set to make a scattered plot of poverty with under age
# smoking as smooth to show causation
p <- ggplot(data = joined)+
geom_point(mapping = aes(x = Year, y = avg_rate_smoking))+
geom_smooth(mapping = aes(x = Year, y = ages_0_to_17_in_poverty_rate))
p #return the plot
})#end of render plot
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
